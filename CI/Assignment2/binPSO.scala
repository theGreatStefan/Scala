import java.io.PrintWriter
import java.io.FileWriter
import java.io.File

object binPSO extends App {
    val filename = "data/BinInDynTest.csv"
    val pw = new PrintWriter(new File(filename))

    var r = scala.util.Random

    var avg_velocity_mag:Array[Double] = Array.fill(5000){0.0}
    var avg_diversity_mag:Array[Double] = Array.fill(5000){0.0}
    var avg_gbest_score:Array[Double] = Array.fill(5000){0.0}
    var avg_percentage_infeasible:Double = 0.0

    var input:Array[String] = Array("abcdef",
                                    "bbdhg",
                                    "cabf")

    //BaliBase Reference 1: Variability, length BB11001
    var input2:Array[String] = Array("GKGDPKKPRGKMSSYAFFVQTSREEHKKKHPDASVNFSEFSKKCSERWKTMSAKEKGKFEDMAKADKARYEREMKTYIPPKGE",
                                    "MQDRVKRPMNAFIVWSRDQRRKMALENPRMRNSEISKQLGYQWKMLTEAEKWPFFQEAQKLQAMHREKYPNYKYRPRRKAKMLPK",
                                    "MKKLKKHPDFPKKPLTPYFRFFMEKRAKYAKLHPEMSNLDLTKILSKKYKELPEKKKMKYIQDFQREKQEFERNLARFREDHPDLIQNAKK",
                                    "MHIKKPLNAFMLYMKEMRANVVAESTLKESAAINQILGRRWHALSREEQAKYYELARKERQLHMQLYPGWSARDNYGKKKKRKREK")

    //BaliBase Reference 2: Orphans BB20001
    var input3:Array[String] = Array("GKGDPKKPRGKMSSYAFFVQTSREEHKKKHPDASVNFSEFSKKCSERWKTMSAKEKGKFEDMAKADKARYEREMKTYIPPKGE",
                                    "MSDKPKRPLSAYMLWLNSARESIKRENPGIKVTEVAKRGGELWRAMKDKSEWEAKAAKAKDDYDRAVKEFEANG",
                                    "MAEKPKRPLSAYMLWLNSARESIKKENPDFKVTEIAKKGGELWRGMKDKSEWEAKAAKMKEEYEKAMKEFERNGGDKSSGASTKKRGKAAEKKKPAKKSKKKDSEDDEEEDESD",
                                    "SKNWKLSIRCGGYTLKVLMENKLLPEPPSTRKKRILESHNNTLVDPCEEHKKKNPDASVKFSEFLKKCSEMWKTIFAKEKGKFEDMAKADKAHYEREMKTYIPPKGEKKKKFKDPNAPKRPPLAFFLFCSEYRPKIKGEHPGLSIDDVVKKLAGMWNNTAAADKQFYEKKAAKLKEKYKKDIAAYRAKGMPNSAKKRAVKAEKSKKKREEEEDEEDEQEEENEEE",
                                    "MGKKDRDSSKPRGRMSAYAYFVQDSRAEHGKNHPNSPVRFAEFSKDCSARWKALEEKGKGVFHEKSMRDKVRYDREMQSYKPPKGEKNKRRRRRKDPDAPKRNLSAFFIFSGENRAAIKSVHPNWSVGDIAKELAVRWRAMTAGEKIPFDKGAAKDKERYIKAMAEYKAKAKPMKRQVKESSSSSSSDSSSDDSSSDDSD",
                                    "MEHFHQIQQTIQHYQQQLAAQQQQQVQQQQLQQHQVVVQQNQQQAHQNSSNTTAGVGTQQLFTYKMASSFPNPATTMAQVVATSNAAGTTGYDYRLNMAQAAAAAAVPGSQWWYSAANQGQVDANTAAQLQHQQQQQQQQQQQQQQQHQQQQQMQQQQQQQNVINSASPMSRVKADAKPRGRMTAYAYFVQTCREEHKKKHPDETVIFAEFSRKCAERWKTMVDKEKKRFHEMAEKDKQRYEAEMQNYVPPKGAVVGRGKKRKQIKDPNAPKRSLSAFFWFCNDERNKVKALNPEFGVGDIAKELGRKWSDVDPEVKQKYESMAERDKARYEREMTEYKTSGKIAMSAPSMQASMQAQAQKAALLAAAAQQQHQQLEEQHDDDDGDGDDDENQ",
                                    "PAPPKRPLSAFFLFKQHNYEQVKKENPNAKITELTSMIAEKWKAVGEKEKKKYETLQSEAKAKYEKALQAYEKKYGKPEKQKKIKKNKKGSK",
                                    "MNSGYSANIFPSSSSPTLYQSHQLQPNPSATMYQATPRDMGKPPVRGKTSPYGFFVKMCYEEHKKKYPNENVQVTEISKKCSEKWKTMVDDEKRRFYELAQKDAERYQAEVSVAAYGGEDAMRKRKRAKKDPHAPKRALSAFFFYSQDKRPEIQAGHPDWKVGQVAQELGKMWKLVPQETKDMYEQKAQADKDRYADEMRNYKAEMQKMSGMDHYDDDNIHHVVHVEDINSQNIS",
                                    "MKGGKSKGESKKAETKLAVNKKGAAATKGGKKPAKGKEPKDPNKPKRPPSAFFVFMADFREQYKKDHPNNKSVAAVGKACGEEWKSLSEEEKAPYVDRALKKKEEYEITLQAYNKKLEGKDDEEGSDKSKSEVNDEDEDEEDEEDEDDD",
                                    "MKGGKSKTESKRADPKLAVNKKGAATKARKPAGKGKAAKDPNKPKRPPSAFFVFMEEFRKVFNKEHPENKAVSAVGKAAGAKWKTMSDAEKAPYVAKSEKRKVEYEKNMRAYNKKQAEGPTGGDEEESEKSVSEVNDEDDDEEGSGEEEDDD",
                                    "MATELKKGPLPTDIEETVITIMREEGVRYITAKILRMRLESKYQMEFGPHKAAIDDIVARAMQRPEFKKQLELALKEKDASKSSGGKGSKRARSAGAEAPSKTKKEMTEKPKKPADYPKPAVSSYLLFVADQREELKAKNPGMQNTAILQTLGKMWSDASDDVKEHYRKKAEEDKARFRREVDEYKRQGGKEYGRGGKIKKDSNAPKRAMTSFMFFSSDFRSKHSDLSIVEMSKAAGAAWKELGPEERKVYEEMAEKDKERYKREMAALPK",
                                    "MADGHSFNNISLSGRGGKNPGLLKINSGGIQWKKQGGGKAVEVDRSDIVSVSWTKVTKSNQLGVKTKDGLYYKFVGFRDQDVPSLSSFFQSSYGKTPDEKQLSVSGRNWGEVDLHGNTLTFLVGSKQAFEVSLADVSQTQLQGKNDVTLEFHVDDTAGANEKDSLMEISFHIPNSNTQFVGDENRPPSQVFNDTIVAMADVSPGVEDAVVTFESIAILTPRGRYNVELHLSFLRLQGQANDFKIQYSSVVRLFLLPKSNQPHTFVVISLDPPIRKGQTMYPHIVMQFETDTVVESELSISDELMNTKFKDKLERSYKGLIHEVFTTVLRWLSGAKITKPGKFRSSQDGFAVKSSLKAEDGVLYPLEKGFFFLPKPPTLILHDEIDYVEFERHAAGGANMHYFDLLIRLKTDHEHLFRNIQRNEYHNLYTFISSKGLKIMNLGGAGTADGVAAVLGDNDDDDAVDPHLTRIRNQAADESDEEDEDFVMGEDDDGGSPTDDSGGDDSDASEGGVGEIKEKSIKKEPKKEASSSKGLPPKRKTVAADEGSSKRKKPKKKKDPNAPKRAMSGFMFFSQMERDNIKKEHPGIAFGEVGKVLGDKWRQMSADDKEPYEAKAQVDKQRYKDEISDYKNPQPMNVDSGNDSDSN",
                                    "MADGHLFNNITLGGRGGTNPGQLRVHSGGILWKKQGGAKAVEVDKSDMVGLTWMKVPRSNQLGVRIKDGLFYKFTGFRDQDVASLTSYLQSTCGITPEEKQLSVSGKNWGEVDLNGNMLTFLVGSKQAFEVSLADVAQTQLQGKNDVMLEFMWMILLEQMRKNSLMEISFHVPNSNTQFVGDENRPPAQVFRDKIMSMADVGAGGEDAVVTFEGIAILTPRGRYNVELHLSFLRLQGQANDFKIQYSSVVRLFLLPKSNQPHTFVVVTLDPPIRKGQTLYPHIVLQFETDYVVDSSLSISEDLLSTKYKDKLEPTYKGLIHEVFTMILRGLSGAKVTRPGKFRSCQDGYAVKSSLKAEDGVLYPLEKSFFFLPKPPTLILHEEIDYVEFERHAAGGSNMHYFDLLIRLKTEQEHLFRNIQRNEYHNLFDFISSKGLKIMNLGADKAADAITAVLQEDDDDAVDPHLERIKNEAGGDESDEEDEDFVADIDDEGSPTDDSGEGESDGSDSGNEEIPTKKKPKKEASAPKVPLSRKKVGDDDNMKKKKQKKKKDPNAPKSISAFMFFSQTERENVKKDNPGIAFTDVGKVLGDRCNKCQLRKKHLLKQRLVADKKRYTDEISNYKNPQPMNVDSGNDSDSA",
                                    "IPDNIQASELAEGVWRRVALGHGLKLLTKNGHVYKYDGFRESEFDKLSDFFKAHYRLELAEKDLCVKGWNWGTVRFGGQLLSFDIGEQPVFEIPLSNVSQCTTGKNEVTLEFHQNDDAEVSLMEVRFYVPPTQEDGVDPVEAFAQNVLSKADVIQATGDAICIFRELQCLTPRGRYDIRIYPTFLHLHGKTFDYKIPYTTVLRLFLLPHKDQRQMFFVISLDPPIKQGQTRYHFLILLFSKDEDISLTLNMNEEEVEKRFEGRLTKNMSGSLYEMVSRVMKALVNRKITVPGNFQGHSGAQCITCSYKASSGLLYPLERGFIYVHKPPVHIRFDEISFVNFARGTTTTRSFDFEIETKQGTQYTFSSIEREEYGKLFDFVNAKKLNIKNRGLKEGMKQSYDEYADSDEDQHDAYLERMKEEGKIREENANDSSDGSGEETDESFNPGEEDDDVAEEFDSNASSSSSSGDGDSDRGEKKSSQEGPKIVKDRKPRKKQVESKKGKDPNVPKRPMSAYMLWLNANREKIKSDHPGISITDLSKKAGELWKAMSKEKKEEWDRKAEDAKRDYEKAMKEYSVGNKSESSKMERSKKKKKKQEKQMKGKGEKKGSPSKSSSSTKSSAKTMSESFKSKEFVSSDESSSAESKKEDSEDERGASPAQSSEDSASGSD",
                                    "MAELQFPGVYVEDVGHLAFGTLKLTEKSLNFKGDKGGKSVNVTGSDIDKLKWQKLGNKPGLRVGLNDGGAHRFGGFKDTDLEKIQSFTSSNWSQSIDQSNLFIKGWNYGQAEVKGKTVEFSWEDKPIFEIPCTNVSNVIANKNEAVLEFHQNDDSKVQLMEMRFHMPIDLENEEDADKVEEFKKAVLAYAGLEAETEQPICLLTDILCTTPRGRYDIKVYPTSIALHGKTYDYKIPIKSINRLFLVPHKDGRHVYFVLSLNPPIRQGQTRYSYLIFEFGKDEEQDLELALTDEQLESSNGNLRRDMTGPIYETISILFKSICNLKITVPGRFLGSSGTPAIQCTHRQNPGLLYPMEKGFLFIHKPAMYIRFEEISSCHFARSDSGTVTRTFDFEIDLKYGGPLTFNAMEKEENNKLFDYLNKKNIKIRNSQRVENTVADSSDDEIDPYKAAVTAEGRQRDDSDDDSTDEDYDLDKDIKKKKEDKESSEGTGSEPDDEYDSGSEQDSSGTGESEPDSEQDVPSKRRKGEPKEKREKKEKREKKEGKKGKKDKDPNAPKRATSAYMQWFLASRNELKEDGDSVADVAKKGGAKWKTMSSDDKKKWEEKAEEDKSRYEKEMKEYRKNGPPSSSSKPSSSKTSKKSSGPSSSKAISKEYISDSDDSDDEEPKKKEKKAAPKEESEESNNGSDGSDESDDSD")

    var input4:Array[String] = Array("abcdefghijk",
                                    "abchijkefdg",
                                    "acegik",
                                    "jhfdb")

    var input5:Array[String] = Array("abcdef",
                                    "ghijkl",
                                    "mnopqr")

    var input6:Array[String] = Array("abc",
                                    "opebndd",
                                    "cabfd",
                                    "plans",
                                    "clearer",
                                    "ddba",
                                    "plasn")

    var input7:Array[String] = Array("luckynumberseven",
                                    "seven",
                                    "luckyseven",
                                    "number")

    var input8:Array[String] = Array("luckynumberseven",
                                    "lucky",
                                    "number",
                                    "seven")



    var runs:Int = 30
    var epochs:Int = 5000

    var mu:Int = 0
    var maxNum:Int = Int.MinValue
    for (i <- 0 to input.length-1) {
        if (input(i).length() > maxNum) {
            maxNum = input(i).length()
        }
    }
    mu = maxNum + Math.round((0.2 * r.nextDouble() * maxNum).toFloat)

    for (i <- 0 to runs-1) { 
        var swarm1 = new binSwarm(30, mu, input.length, 2.0, 2.0, 1.0, input) 
        swarm1.runSwarm(epochs)
        
        for (j <- 0 to epochs-1) {
            avg_velocity_mag(j) += swarm1.velocityMag_overTime(j)
            avg_diversity_mag(j) += swarm1.euclidean_distance_overTime(j)
            avg_gbest_score(j) += swarm1.gbest_overTime(j)
        }
        avg_percentage_infeasible += (swarm1.infeasibleCount/epochs.toDouble)
    }

    for (i <- 0 to epochs-1) {
        avg_velocity_mag(i) = avg_velocity_mag(i)/runs
        avg_diversity_mag(i) = avg_diversity_mag(i)/runs
        avg_gbest_score(i) = avg_gbest_score(i)/runs
    }

    for (i <- 0 to epochs-1) {
        pw.write(avg_velocity_mag(i)+","+avg_diversity_mag(i)+","+avg_gbest_score(i)+"\n")
    }
    println("Average percentage of infeasible solutions: "+ (avg_percentage_infeasible/runs.toDouble)*100+"%")

    pw.close()

}